<?php

/**
 * @file
 * Install hooks for mdm_media.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Component\Utility\NestedArray;
use Symfony\Component\Yaml\Yaml;

/**
 * Reads in new configuration.
 *
 * @param string $config_name
 *   Configuration name.
 * @param string $mdm_media_path
 *   Base path.
 */
function mdm_media_read_in_new_config($config_name, $mdm_media_path, $configDir) {
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');
  $active_storage->write($config_name, Yaml::parse(file_get_contents($mdm_media_path . '/config/' . $configDir . '/' . $config_name . '.yml')));
}

/**
 * Updates a configuration from yml file.
 *
 * @param string $ymlFileName
 *   Yml file name (without .yml suffix).
 * @param array $sets
 *   An array of what needs to be set.
 *   - The key will be what we are setting (Can have . in string for array).
 *   - The value is the key that will be used from the new config file (Can have
 *     . in string for array).
 *
 *   For example if you are updating 'content' with 'content' from the new
 *   config file, $sets would be ['content' => 'content'].
 */
function mdm_media_update_configuration_from_yml($ymlFileName, array $sets, $configDir) {
  $mdm_media_path = drupal_get_path('module', 'mdm_media');
  $yml = Yaml::parse(file_get_contents($mdm_media_path . '/config/' . $configDir . '/' . $ymlFileName . '.yml'));
  $config = \Drupal::configFactory()->getEditable($ymlFileName);
  foreach ($sets as $key => $value) {
    $parts = explode('.', $value);
    if (count($parts) == 1) {
      $config->set($key, $yml[$value]);
    }
    else {
      $value = NestedArray::getValue($yml, $parts);
      $config->set($key, $value);
    }
  }
  $config->save(TRUE);
}

/**
 * Update entity from yml.
 *
 * Some config like form display needs to be updated via config manager.
 *
 * @param string $ymlFileName
 *   Yml file name.
 * @param string $entityType
 *   The entity type for this storage.
 * @param mixed $id
 *   The ID of the entity to load.
 * @param array $setComponents
 *   Array of components you want to add.
 *   - The key will be what we are setting.
 *   - The value is the key that will be used from the new config file (Can have
 *     . in string for array).
 */
function mdm_media_update_entity_from_yml($ymlFileName, $entityType, $id, array $setComponents, $configDir) {
  $mdm_media_path = drupal_get_path('module', 'mdm_media');
  $yml = Yaml::parse(file_get_contents($mdm_media_path . '/config/' . $configDir . '/' . $ymlFileName . '.yml'));

  $entity = \Drupal::entityTypeManager()
    ->getStorage($entityType)
    ->load($id);
  foreach ($setComponents as $key => $value) {
    $parts = explode('.', $value);
    if (count($parts) == 1) {
      $entity->setComponent($key, $yml[$value]);
    }
    else {
      $value = NestedArray::getValue($yml, $parts);
      $entity->setComponent($key, $value);
    }
  }

  $entity->save();
}

/**
 * Add focal point to MD Media images.
 */
function mdm_media_update_8001() {
  // Install new dependencies.
  $modules = [
    'crop',
    'focal_point',
  ];
  \Drupal::service('module_installer')->install($modules);


  // Sets variable for the path.
  $mdm_media_path = drupal_get_path('module', 'mdm_media');

  // Create new image style.
  mdm_media_read_in_new_config('image.style.media_default', $mdm_media_path, 'install');

  // Check current preview style on Media image.
  $media_efd_preview_style = \Drupal::configFactory()
    ->getEditable('core.entity_form_display.media.image.default')
    ->get('content.field_media_image.settings.preview_image_style');

  if ($media_efd_preview_style === 'thumbnail') {
    // Updates Media Image default form display.
    mdm_media_update_entity_from_yml('core.entity_form_display.media.image.default', 'entity_form_display', 'media.image.default', [
      'config' => 'dependencies.config',
      'module' => 'dependencies.module',
      'field_media_image' => 'content.field_media_image',
    ], 'install');
  }

  // Check current image style on Media image.
  $media_evd_img_style = \Drupal::configFactory()
    ->getEditable('core.entity_view_display.media.image.default')
    ->get('content.field_media_image.settings.image_style');

  if ($media_evd_img_style === '') {
    // Updates Media Image default view display.
    mdm_media_update_entity_from_yml('core.entity_view_display.media.image.default', 'entity_view_display', 'media.image.default', [
      'config' => 'dependencies.config',
      'module' => 'dependencies.module',
      'field_media_image' => 'content.field_media_image',
    ], 'install');
  }

  // Send message to updater.
  $message = t('Updated the mdm_media configuration.');
  return $message;
}

/*/**
 * Add focal point to MD Media images.
 * /
function mdm_media_update_8001() {
  // Install new dependencies.
  $modules = [
    'crop',
    'focal_point',
  ];
  \Drupal::service('module_installer')->install($modules);

  // Get current config.
  $config_factory = \Drupal::configFactory();
  $media_img_efd_list = $config_factory->listAll('core.entity_form_display.media.image.');

  foreach ($media_img_efd_list as $media_img_efd_name) {
    $media_img_efd = $config_factory->getEditable($media_img_efd_name);
    if ($media_image_settings = $media_img_efd->get('content.field_media_image.settings')) {
      if ($media_image_settings->get('preview_image_style') === 'thumbnail') {
        $media_img_efd->get('dependencies');
        $media_image_settings
          ->set('preview_image_style', 'media_form_preview')
          ->set('preview_link', TRUE)
          ->set('offsets', '50,50')
          ->save();
      }
    }
  }
}*/
